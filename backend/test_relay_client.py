#!/usr/bin/env python3
"""
Script de test pour le Web Service Relay
Ce script d√©montre comment utiliser l'API pour synchroniser les fichiers JSON
"""

import asyncio
import websockets
import json
import requests
import os
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:8000"
WS_URL = "ws://localhost:8000/api/files/ws"

class RelayClient:
    def __init__(self, base_url: str, ws_url: str):
        self.base_url = base_url
        self.ws_url = ws_url
        self.websocket = None
        
    async def connect_websocket(self):
        """Se connecte au WebSocket pour recevoir les notifications"""
        try:
            self.websocket = await websockets.connect(self.ws_url)
            print("‚úÖ Connect√© au WebSocket Relay")
            
            # √âcouter les messages
            async for message in self.websocket:
                data = json.loads(message)
                print(f"üì° Notification re√ßue: {data}")
                
        except Exception as e:
            print(f"‚ùå Erreur WebSocket: {e}")
    
    def get_societes(self):
        """R√©cup√®re la liste des soci√©t√©s"""
        try:
            response = requests.get(f"{self.base_url}/api/files/societes")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des soci√©t√©s: {e}")
            return None
    
    def get_societe_files(self, societe: str):
        """R√©cup√®re les fichiers d'une soci√©t√©"""
        try:
            response = requests.get(f"{self.base_url}/api/files/societe/{societe}/files")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des fichiers: {e}")
            return None
    
    def download_file(self, societe: str, filename: str, save_path: str):
        """T√©l√©charge un fichier JSON"""
        try:
            response = requests.get(f"{self.base_url}/api/files/download/{societe}/{filename}")
            response.raise_for_status()
            
            # Cr√©er le r√©pertoire de destination
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            
            # Sauvegarder le fichier
            with open(save_path, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ Fichier t√©l√©charg√©: {save_path}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
            return False
    
    def upload_file(self, societe: str, file_path: str):
        """Upload un fichier JSON"""
        try:
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f, 'application/json')}
                response = requests.post(f"{self.base_url}/api/files/upload/{societe}", files=files)
                response.raise_for_status()
                
            result = response.json()
            print(f"‚úÖ Fichier upload√©: {result}")
            return result
        except Exception as e:
            print(f"‚ùå Erreur lors de l'upload: {e}")
            return None
    
    def sync_societe(self, societe: str):
        """Synchronise une soci√©t√©"""
        try:
            response = requests.post(f"{self.base_url}/api/files/sync/{societe}")
            response.raise_for_status()
            result = response.json()
            print(f"‚úÖ Synchronisation termin√©e: {result}")
            return result
        except Exception as e:
            print(f"‚ùå Erreur lors de la synchronisation: {e}")
            return None
    
    def get_status(self):
        """R√©cup√®re le statut du relay"""
        try:
            response = requests.get(f"{self.base_url}/api/files/status")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration du statut: {e}")
            return None

async def main():
    """Fonction principale de test"""
    client = RelayClient(BASE_URL, WS_URL)
    
    print("üöÄ Test du Web Service Relay")
    print("=" * 50)
    
    # 1. V√©rifier le statut
    print("\n1. V√©rification du statut...")
    status = client.get_status()
    if status:
        print(f"üìä Statut: {status}")
    
    # 2. R√©cup√©rer les soci√©t√©s
    print("\n2. R√©cup√©ration des soci√©t√©s...")
    societes = client.get_societes()
    if societes and societes.get('societes'):
        print(f"üè¢ Soci√©t√©s disponibles: {societes['societes']}")
        
        # 3. Pour chaque soci√©t√©, r√©cup√©rer les fichiers
        for societe in societes['societes']:
            print(f"\n3. Fichiers pour {societe}...")
            files = client.get_societe_files(societe)
            if files and files.get('files'):
                print(f"üìÅ {len(files['files'])} fichiers trouv√©s:")
                for file_info in files['files']:
                    print(f"   - {file_info['filename']} ({file_info['size']} bytes)")
                    
                    # 4. T√©l√©charger un exemple de fichier
                    save_path = f"downloads/{societe}/{file_info['filename']}"
                    client.download_file(societe, file_info['filename'], save_path)
                    break  # Un seul fichier par soci√©t√© pour l'exemple
    else:
        print("‚ö†Ô∏è Aucune soci√©t√© trouv√©e")
    
    # 5. D√©marrer l'√©coute WebSocket
    print("\n5. D√©marrage de l'√©coute WebSocket...")
    print("üì° En attente de notifications (Ctrl+C pour arr√™ter)...")
    
    try:
        await client.connect_websocket()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t du client")

if __name__ == "__main__":
    print("üîß Script de test du Web Service Relay")
    print("Assurez-vous que le serveur est d√©marr√© sur http://localhost:8000")
    print()
    
    # Test synchrone
    client = RelayClient(BASE_URL, WS_URL)
    
    # V√©rifier si le serveur est accessible
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Serveur accessible")
        else:
            print("‚ùå Serveur non accessible")
            exit(1)
    except Exception as e:
        print(f"‚ùå Impossible de se connecter au serveur: {e}")
        exit(1)
    
    # Lancer le test asynchrone
    asyncio.run(main()) 